package com.example.myapplication

import java.io.File
import java.io.FileOutputStream
import java.text.SimpleDateFormat
import java.util.*

object WavUtils {
    
    fun File.writeWav(audioData: List<Short>, sampleRate: Int = 16000) {
        FileOutputStream(this).use { fos ->
            val dataSize = audioData.size * 2
            val fileSize = dataSize + 36
            
            // WAV header
            fos.write("RIFF".toByteArray())
            fos.write(fileSize.toByteArray())
            fos.write("WAVE".toByteArray())
            fos.write("fmt ".toByteArray())
            fos.write(16.toByteArray()) // PCM header size
            fos.write(1.toShortArray()) // PCM format
            fos.write(1.toShortArray()) // Mono
            fos.write(sampleRate.toByteArray()) // Sample rate
            fos.write((sampleRate * 2).toByteArray()) // Byte rate
            fos.write(2.toShortArray()) // Block align
            fos.write(16.toShortArray()) // Bits per sample
            fos.write("data".toByteArray())
            fos.write(dataSize.toByteArray())
            
            // Audio data
            audioData.forEach { sample -> fos.write(sample.toByteArray()) }
        }
    }
    
    fun File.writeTranscript(audioData: List<Short>, timestamp: String, sampleRate: Int = 16000): String {
        val mockTranscriptions = listOf(
            "Hello, this is a test recording.",
            "Voice activity detection is working.",
            "Speech to text conversion complete.",
            "Audio sample recorded successfully.",
            "Testing microphone input functionality."
        )
        
        val transcription = mockTranscriptions.random()
        val duration = audioData.size / sampleRate.toFloat()
        
        val content = """
            === VOICE RECORDING TRANSCRIPT ===
            Timestamp: ${SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.getDefault()).format(Date())}
            Audio File: voice_${timestamp}.wav
            Duration: ${"%.2f".format(duration)}s
            Sample Rate: ${sampleRate}Hz
            Samples: ${audioData.size}
            ================================
            
            TRANSCRIPTION:
            $transcription
            
            Generated by Voice Recorder App
        """.trimIndent()
        
        writeText(content)
        return transcription
    }
    
    // Helper extension functions for byte conversion
    private fun Int.toByteArray() = byteArrayOf(
        (this and 0xFF).toByte(),
        ((this shr 8) and 0xFF).toByte(),
        ((this shr 16) and 0xFF).toByte(),
        ((this shr 24) and 0xFF).toByte()
    )
    
    private fun Short.toByteArray() = byteArrayOf(
        (this.toInt() and 0xFF).toByte(),
        ((this.toInt() shr 8) and 0xFF).toByte()
    )
    
    private fun Int.toShortArray() = this.toShort().toByteArray()
} 